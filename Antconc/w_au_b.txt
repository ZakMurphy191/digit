1.) 
a. What XPath expression helps you to see all of the <div> elements in the document? (How many are there?)
//@attribute() = 25854
b. Lists of persons are coded in <listPerson> elements. What XPath expression shows you all the <listPerson> elements in the document?
//(listPerson) = 6 items
C. What XPath expression shows you which <div> elements contain child <listPerson> elements? (Use a predicate filter with square brackets [ ] to help you.) How many <div> elements contain <listPerson> elements inside?
//div[listPerson] = 4 items
d. How can you change your XPath expression to return <div> elements that contain <listPlace> elements inside?
//div[listPlace] = 1 item 
e. Now, write an XPath to return all the <place> children of the <listPlace> elements. How many are there?
//element(listPlace)/child::place
F. What is the difference between these two XPath expressions?
The one element has a child element and the other has a div element looking for list place.
2.)
a. What XPath shows you all of the immediate children (whatever they are) of <div> elements?
//element()/child::div = I got 9 items for this.
B. There is a list of animals in this document coded in <list sortKey="animals">. How can you return all the child elements of this particular list to each of the animals? (How many are there?)
//@sortKey="animals" = I only got 1 item for this.
C. I am confused on this one.
3.)
A. First, write an XPath expression that returns all the <person> elements. How many are there?
//element(person) = 1223 
B. Are all of the <person> elements coded with an @sex attribute? Use a predicate filter with [ ] to find out and record your expression here. How many results do you see?
//element(person)/@sex = 1107 male and female

C. Apply a count() function to your previous expressions to return just a number in the XPath window

I am confused on the rest of the questions.